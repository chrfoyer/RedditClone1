@page "/Login"
@using HttpClients.ClientInterfaces
@using global::Domain.DTOs
@using UIComponents
@inject IUserService userService;
@inject NavigationManager navMgr;

<div class="card">
    <h3 class="text-white">Login or register</h3>
    <div class=" d-flex flex-column">
        <div class="my-1">
            <label class="text-white">Username:</label>
            <input type="text" @bind="username" @bind:event="oninput"/>
        </div>
        <div class="my-1">
            <label class="text-white">Password:</label>
            <input type="password" @bind="password" @bind:event="oninput"/>
        </div>


    </div>
    <div class="d-flex justify-content-around">
        <div class="button-row">
            <button @onclick=@(LoginAsync) disabled="@string.IsNullOrEmpty(username)" class="acceptbtn">Login</button>
        </div>
        <div class="button-row">
            <button @onclick=@(() => RegisterAsync()) disabled="@string.IsNullOrEmpty(username)" class="acceptbtn">Register</button>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(resultMsg))
    {
        <label style="color: @color">@resultMsg</label>
    }
</div>
<Modal ShowModal="showModalLogin">
    <p>You have benn successfully logged in. Enjoy!</p>
    <button @onclick="@ProceedLogin">Ok</button>
</Modal>
<Modal ShowModal="showModalReg">
    <p>Your account has been successfully created. Now you need to login.</p>
    <button @onclick="@ProceedReg">Ok</button>
</Modal>


@code {
    private string username;
    private string password;
    private string resultMsg;
    private string color;
    private UserCreationDto dto;
    private bool showModalLogin = false;
    private bool showModalReg = false;
    //TODO: The code after await is not executed or not reflected in the UI. After another click it works.

    protected override void OnInitialized()
    {
        username = "";
        password = "";
        resultMsg = "";
        color = "red";
        showModalLogin = false;
        showModalReg = false;
        dto = new UserCreationDto();
    }

    private async Task LoginAsync()
    {
        try
        {
            Console.WriteLine(username);
            Console.WriteLine(password);
            dto.Password = password;
            dto.UserName = username;
            await userService.LoginAsync(dto);
            showModalLogin = true;
        }
        catch (Exception e)
        {
            resultMsg = e.Message + " Please try registering.";
        }
    }

    private async Task RegisterAsync()
    {
        try
        {
            await userService.Create(new UserCreationDto(username, password));
            showModalReg = true;
            username = "";
            password = "";
            resultMsg = "";
        }
        catch (Exception e)
        {
            resultMsg = e.Message;
        }
    }
    
    private void ProceedLogin()
    {
        showModalLogin = false;
        navMgr.NavigateTo("/");
    }
    private void ProceedReg()
    {
        showModalReg = false;
    }

}